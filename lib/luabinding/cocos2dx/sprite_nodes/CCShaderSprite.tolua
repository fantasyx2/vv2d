
class CCShaderSprite: public CCSprite
{
    /**
     * Creates an empty sprite without texture. You can call setTexture method subsequently.
     *
     * @return An empty sprite object that is marked as autoreleased.
     */
    static CCShaderSprite* create();

    /**
     * Creates a sprite with an image filename.
     *
     * After creation, the rect of sprite will be the size of the image,
     * and the offset will be (0,0).
     *
     * @param   pszFileName The string which indicates a path to image file, e.g., "scene1/monster.png".
     * @return  A valid sprite object that is marked as autoreleased.
     */
    static CCShaderSprite* create(const char *pszFileName);

    /**
     * Creates a sprite with an image filename and a rect.
     *
     * @param   pszFileName The string wich indicates a path to image file, e.g., "scene1/monster.png"
     * @param   rect        Only the contents inside rect of pszFileName's texture will be applied for this sprite.
     * @return  A valid sprite object that is marked as autoreleased.
     */
    static CCShaderSprite* create(const char *pszFileName, const CCRect& rect);

    /**
     * Creates a sprite with an exsiting texture contained in a CCTexture2D object
     * After creation, the rect will be the size of the texture, and the offset will be (0,0).
     *
     * @param   pTexture    A pointer to a CCTexture2D object.
     * @return  A valid sprite object that is marked as autoreleased.
     */
    static CCShaderSprite* createWithTexture(CCTexture2D *pTexture);

    /**
     * Creates a sprite with a texture and a rect.
     *
     * After creation, the offset will be (0,0).
     *
     * @param   pTexture    A pointer to an existing CCTexture2D object.
     *                      You can use a CCTexture2D object for many sprites.
     * @param   rect        Only the contents inside the rect of this texture will be applied for this sprite.
     * @return  A valid sprite object that is marked as autoreleased.
     */
    static CCShaderSprite* createWithTexture(CCTexture2D *pTexture, const CCRect& rect);

    /**
     * Creates a sprite with an sprite frame.
     *
     * @param   pSpriteFrame    A sprite frame which involves a texture and a rect
     * @return  A valid sprite object that is marked as autoreleased.
     */
    static CCShaderSprite* createWithSpriteFrame(CCSpriteFrame *pSpriteFrame);

    /**
     * Creates a sprite with an sprite frame name.
     *
     * A CCShaderSpriteFrame will be fetched from the CCShaderSpriteFrameCache by pszSpriteFrameName param.
     * If the CCShaderSpriteFrame doesn't exist it will raise an exception.
     *
     * @param   pszSpriteFrameName A null terminated string which indicates the sprite frame name.
     * @return  A valid sprite object that is marked as autoreleased.
     */
    static CCShaderSprite* createWithSpriteFrameName(const char *pszSpriteFrameName);
	
	void setCC_Texture1(CCTexture2D*t);
	void setCC_Texture2(CCTexture2D*t);
	void setCC_Texture3(CCTexture2D*t);
    void setSdf4(int id,float v1,float v2=0,float v3=0,float v4=0);
    void setSdf(int id,float v);
    float getSdf(int id);
	bool setShaderFromFile(char*vecfile,char*frgfile);
	bool setShaderFromByte(char*vbytes,char*fbytes,char*name);
	bool resetShader();
    void setQuadVertex(float tl_x,float tl_y,float tr_x,float tr_y,float bl_x,float bl_y,float br_x,float br_y);

};
